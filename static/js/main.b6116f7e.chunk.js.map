{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/Detail.js","components/App.js","apollo.js","index.js"],"names":["Container","styled","div","Poster","props","bg","LikeBtn","button","TOGGLE_LIKE_MOVIE","gql","GET_MOVIE","id","isLiked","useQuery","variables","parseInt","loading","data","useMutation","toggleLikeMovie","movie","to","onClick","Header","header","Title","h1","Subtitle","h2","Loading","Movies","GET_MOVIES","movies","map","m","Movie","medium_cover_image","Column","h4","Description","p","useParams","title","language","rating","description_intro","App","exact","path","component","Home","Detail","client","ApolloClient","uri","cache","InMemoryCache","resolvers","Mutation","_","modify","fields","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b6116f7e.chunk.js","sourcesContent":["import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    height: 400px;\n    width: 100%;\n    overflow: hidden;\n`;\nconst Poster = styled.div`\n    background-image: url(${props => props.bg});\n    height: 360px;\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    border-radius: 7px;\n`;\nconst LikeBtn = styled.button`\n    height: 25px;\n    width: 25px;\n    font-size: 20px;\n    background-color: black;\n    border: none;\n    color: white;\n    cursor: pointer;\n`;\n\nconst TOGGLE_LIKE_MOVIE = gql`\n    mutation toggleLikeMovie($id: Int!) {\n        toggleLikeMovie(id:$id) @client\n    }\n`;\n\nconst GET_MOVIE = gql`\n    query getMovie($id: Int!) {\n        movie(id: $id) {\n            id\n            title\n            medium_cover_image\n            language\n            rating\n            description_intro\n            isLiked @client\n        }\n    }\n`;\n\nexport default ({ id, bg, isLiked }) => {\n    const { loading, data } = useQuery(GET_MOVIE, {\n        variables: {\n            id: parseInt(id)\n        }\n    });\n    const [toggleLikeMovie] = useMutation(\n        TOGGLE_LIKE_MOVIE,\n        { variables: { id: parseInt(id) } }\n    );\n    return (\n        <Container>\n            {loading && \"Loading...\"}\n            {!loading && data.movie && <>\n                <Link to={`/${id}`}>\n                    <Poster bg={bg}></Poster>\n                </Link>\n                <LikeBtn onClick={toggleLikeMovie} >{isLiked ? \"‚ù§Ô∏è\" : \"ü§ç\"}</LikeBtn>\n            </>}\n        </Container>\n    );\n};","import { useQuery, gql } from \"@apollo/client\";\nimport styled from \"styled-components\";\nimport Movie from \"../components/Movie\";\n\nconst Container = styled.div`\n    color: red;\n    text-align: center;\n    font-weight: bold;\n    background-color: black;\n    min-height: 100vh;\n`;\nconst Header = styled.header`\n    height: 170px;\n    width: 100%;\n    padding-top: 50px;\n    box-sizing: border-box;\n    background-color: black;\n`;\nconst Title = styled.h1`\n    font-size: 50px;\n    \n`;\nconst Subtitle = styled.h2`\n    font-size: 25px;\n`;\nconst Loading = styled.div`\n    font-size: 25px;\n    opacity: 0.5;\n    font-weight: 500;\n    margin-top: 10px;\n    padding-top: 200px;\n`;\nconst Movies = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    grid-gap: 25px;\n    width: 100%;\n    position: relative;\n    padding: 30px;\n    box-sizing: border-box;\n`;\n\nconst GET_MOVIES = gql`\n    query {\n        movies(rating: 9.0) {\n            id\n            medium_cover_image\n            isLiked @client\n        }\n    }\n`;\n\nexport default () => {\n    const { loading, data } = useQuery(GET_MOVIES);\n    return (\n        <Container>\n            <Header>\n                <Title>Apollo Movies</Title>\n                <Subtitle>I love GraphQL</Subtitle>\n            </Header>\n            {loading && <Loading>Loading...</Loading>}\n            {!loading && data.movies &&\n                <Movies>\n                    {data.movies.map(m =>\n                        <Movie\n                            key={m.id}\n                            id={m.id}\n                            isLiked={m.isLiked}\n                            bg={m.medium_cover_image}\n                        />\n                    )}\n                </Movies>\n            }\n        </Container>\n    );\n};","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    height: 100vh;\n    background-color: black;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: white;\n`;\nconst Column = styled.div`\n    width: 500px;\n    padding: 20px;\n`;\nconst Title = styled.h1`\n    font-size: 65px;\n    margin-bottom: 15px;\n`;\nconst Subtitle = styled.h4`\n    font-size: 35px;\n    margin-bottom: 10px;\n`;\nconst Description = styled.p`\n    display: -webkit-box;\n    font-size: 28px;\n    height: 280px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    -webkit-line-clamp: 10;\n    -webkit-box-orient: vertical;\n`;\nconst Poster = styled.div`\n    background-image: url(${props => props.bg});\n    width: 300px;\n    height: 450px;\n    background-size: cover;\n    background-position: center center;\n`;\n\nconst GET_MOVIE = gql`\n    query getMovie($id: Int!) {\n        movie(id: $id) {\n            id\n            title\n            medium_cover_image\n            language\n            rating\n            description_intro\n            isLiked @client\n        }\n    }\n`;\n\nexport default () => {\n    const { id } = useParams();\n    const { loading, data } = useQuery(GET_MOVIE, {\n        variables: {\n            id: parseInt(id)\n        }\n    });\n    return (\n        <Container>\n            <Column>\n                <Title>\n                    {loading ?\n                        \"Loading...\"\n                        : `${data.movie.title} ${data.movie.isLiked ? \"‚ù§Ô∏è\" : \"ü§ç\"}`\n                    }\n                </Title>\n                {!loading && data.movie &&\n                    (<>\n                        <Subtitle>{data.movie.language} ¬∑ {data.movie.rating}</Subtitle>\n                        <Description>{data.movie.description_intro}</Description>\n                    </>)\n                }\n            </Column>\n            <Poster bg={data && data.movie ? data.movie.medium_cover_image : \"\"}></Poster>\n        </Container>\n    )\n};","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"../routes/Home\";\nimport Detail from \"../routes/Detail\";\n\nfunction App() {\n  return <Router>\n    <Route exact path=\"/\" component={Home} />\n    <Route path=\"/:id\" component={Detail} />\n  </Router>\n}\n\nexport default App;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n    uri: \"https://bomi-movieql-backend.herokuapp.com/\",\n    cache: new InMemoryCache(),\n    resolvers: {\n        Movie: {\n            isLiked: () => false\n        },\n        Mutation: {\n            toggleLikeMovie: (_, { id, isLiked }, { cache }) => {\n                cache.modify({\n                    id: `Movie:${id}`,\n                    fields: {\n                        isLiked: (isLiked) => !isLiked, // ÌòÑÏû¨ isLiked Í∞íÏùÑ Î∞õÏïÑÏÑú true-false ÌÜ†Í∏Ä\n                    },\n                });\n            },\n        },\n    },\n});\n\nexport default client;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { ApolloProvider } from '@apollo/client/react';\nimport client from \"./apollo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}